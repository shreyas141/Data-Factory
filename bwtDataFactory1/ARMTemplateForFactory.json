{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bwtDataFactory1"
		},
		"ls_datalake_storage_bwtpractice_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_datalake_storage_bwtpractice'"
		},
		"ls_databricks_workspace_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0320-040731-i7n463r9"
		},
		"ls_datalake_storage_bwtpractice_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bwtpractice.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_data_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "act_If_folder_exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "act_get_metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('act_get_metadata').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "act_ingest_data",
									"description": "This notebook injest data of circuits, qualifying, constructor, results, races, drivers, qualifying.",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/formula1-project2/injestion/1.Injest_all_files",
										"baseParameters": {
											"data_source": {
												"value": "@variables('v_data_source')",
												"type": "Expression"
											},
											"file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_databricks_workspace",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "act_get_metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ls_bwtpractice_data_lake",
								"type": "DatasetReference",
								"parameters": {
									"p_window_start_date": {
										"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyy-MM-dd')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"variables": {
					"v_data_source": {
						"type": "String",
						"defaultValue": "ErgastAPI"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ls_bwtpractice_data_lake')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_databricks_workspace')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_bwtpractice_data_lake')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake_storage_bwtpractice",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_window_start_date": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@formatDateTime(dataset().p_window_start_date, 'yyy-MM-dd')",
							"type": "Expression"
						},
						"folderPath": "incremental_files",
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake_storage_bwtpractice')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_databricks_workspace')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This linked service creates a link with databricks ws",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-5181963175249541.1.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/ecd1743b-4909-4d75-8c4c-54480d1e2d6f/resourceGroups/brainworks-practice/providers/Microsoft.Databricks/workspaces/bwt_databricks_ws",
					"existingClusterId": "[parameters('ls_databricks_workspace_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalake_storage_bwtpractice')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_datalake_storage_bwtpractice_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_datalake_storage_bwtpractice_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_data_transfromation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "act_race_resuts_trans",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/formula1-project2/transformations/1.Races_Results",
							"baseParameters": {
								"p_file_date": {
									"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyy-MM-dd')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_databricks_workspace",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "act_driver_standing_trans",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "act_race_resuts_trans",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/formula1-project2/transformations/2.Driver_Standing",
							"baseParameters": {
								"p_file_date": {
									"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyy-MM-dd')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_databricks_workspace",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "act_constructor_standing_trans",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "act_race_resuts_trans",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/formula1-project2/transformations/3.Constructor_standings",
							"baseParameters": {
								"p_file_date": {
									"value": "@formatDateTime(pipeline().parameters.p_window_end_date, 'yyy-MM-dd')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_databricks_workspace",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_databricks_workspace')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_data_process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingest data exe",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_data_ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_window_end_date": {
									"value": "@formatDateTime(pipeline().parameters.p_start_date, 'yyy-MM-dd')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "data transformation exe",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingest data exe",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_data_transfromation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_window_end_date": {
									"value": "@formatDateTime(pipeline().parameters.p_start_date, 'yyy-MM-dd')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_start_date": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_data_ingestion')]",
				"[concat(variables('factoryId'), '/pipelines/pl_data_transfromation')]"
			]
		}
	]
}