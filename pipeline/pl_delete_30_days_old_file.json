{
	"name": "pl_delete_30_days_old_file",
	"properties": {
		"activities": [
			{
				"name": "get_folder_name",
				"description": "In my case i have files inside a folder and those files having same name as folder name",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "ds_for_realtime_scenarios_adlsgentwo",
						"type": "DatasetReference"
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "BinaryReadSettings"
					}
				}
			},
			{
				"name": "for_each_childItem",
				"description": "This act get the input of get meta data act and ittrets on that output",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "get_folder_name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get_folder_name').output.childItems",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "get_lastModifiedDate_and_itemName",
							"description": "This act get the lastModifiedDate of file and its name ",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "ds_raw_ecdc_realtimeScenario",
									"type": "DatasetReference",
									"parameters": {
										"file_name": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"lastModified",
									"itemName"
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "if_lastModifiedDate_is_30_days_before",
							"description": "This act checks if the file is 30 days old or not if it is then act inside if condition act deletes that file",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "get_lastModifiedDate_and_itemName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@less(activity('get_lastModifiedDate_and_itemName').output.lastModified, formatDateTime(adddays(utcnow(), 1), 'yyyy-MM-ddTHH:mm:ssZ'))",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "delete_file",
										"type": "Delete",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "ds_raw_ecdc_realtimeScenario",
												"type": "DatasetReference",
												"parameters": {
													"file_name": {
														"value": "@activity('get_lastModifiedDate_and_itemName').output.itemName",
														"type": "Expression"
													}
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"folder": {
			"name": "realtime_scenarios"
		},
		"annotations": []
	}
}